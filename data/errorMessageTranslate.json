{"fr":{
"deuxPointsIf": "Une condition 'if' doit se terminer par les deux poiint ':' comme ceci -> 'if a < b:'",
"deuxPointsElse": "Une condition 'else' doit se terminer par les deux points ':' comme ceci -> 'else:'",
"deuxPointsElif": "Une condition 'elif' doit se terminer par les deux points ':' comme ceci -> 'else if b < c:'",
"deuxPointsWhile": "Une boucle 'while' doit se terminer par les deux points ':' comme ceci -> 'while maVariable < 5:'",
"deuxPointsFor": "Une boucle 'for' doit se terminer par les deux points ':' comme ceci -> 'for loop in range(5):'",
"deuxPointsDef": "Une définition de fonction 'def' doit se terminer par les deux points ':' comme ceci -> 'def maFonction():'",

"conditionOneEqual": "Pour écrire une égalitée dans une condition, on doit mettre un double égal, et donc écrire: a == b",
"((previousErrorBrackets)|(errorBrackets)": "Tu dois avoir autant de parenthèses ouvrantes que fermetantes: tu peux écrire (a*(b+c)) mais PAS (a*(b+c) NI a*(b+c))",
"missingParentheses": "Tu dois mettre des parenthèses autour des paramètre d'une fonction pour l'appeler: tu ne dois pas écrire {{0}} [paramètres]  MAIS: {{0}}([paramètres]) , en remplaçant [paramètres] par les paramètres de la fonction",

"pointVirguleFin": "En python, il n'y a pas besoin de mettre un point-virgule à la fin d'une instruction",
"typeVariableDeclaration": "En python, on n'a pas besoin de donner le type d'une variable lors de sa déclaration",

"plusGrandEgalInversion": "Tu ne dois PAS écrire => mais : >=",
"plusPetitEgalInversion": "Tu ne dois PAS écrire =< mais : <=",
"guillemetsError": "Tu n'a pas bien fermé tes guillemets: tu dois avoir autant de guillements ouvrant que fermant autour d'une chaine de caractère. \nPar exemple, tu dois écrire 'Hello world !' ou encore \"Hello world !\"",

"nonAscii": "Tu as utilisé un accent dans ton code, et tu n'as pas le droit ! Enlève l'accent, ou alors rajoute au début de ton code, avant TOUTES les autres lignes: \"# coding=utf-8\"",
"invalidSyntax": "Ton code n'est pas écrit correctement ! Vérifie bien ce que tu as écrit.",

"indentationError": "Tu as une erreure dans l'indentation: tu dois mettre le même nombre d'espace devant les instructions d'un MEME bloc",
"indentationErrorEmptyBlock": "Tu as un bloc d'instruction (if, elif, else, while, for, def...) qui est VIDE, ce qui est interdit",
"indentationErrorLevel": "TOUTES les instructions d'un même bloc d'instruction(if, elif, else, while, for, def...) doivent avoir le même espace devant elle (sauf si elles sont dans des sous-blocs)",

"indexError": "Tu accède à une case de la liste qui n'existe pas. Si tu utilise une variable, vérifie qu'elle ne peut pas être trop grande. Souviens toi que les cases d'une liste sont numérotées de 0 à TAILLE-1: dans une liste de taille 5, les cases -3, 5 et 6 n'existent PAS",
"KeyError": "Tu accès à une CLÉE (une case) de ton dictionaire qui n'existe pas. Vérifie que ta clée existe bien !",
"ZeroDivisionError": "Cette instruction effectue une division pas zero, ce qui est IMPOSSIBLE. Si tu utilise une variable, vérifie que le diviseur le vaut jamais 0",
"mathDomainError": "Tu utilise un fonction mathématique en lui donnant un nombre qui est interdit !",
"mathDomainError_log" : "La fonction log (logarithme) prend en paramètre un nombre qui doit être STRICTEMENT SUPÉRIEUR à 0. ",
"mathDomainError_sqrt":"La fonction sqrt (racine carrée) prend en paramètre un nombre qui doit être SUPÉRIEUR OU ÉGAL à 0. ",
"ImportError": "Un fichier ou un module inexistant est importé. Vérifie bien son nom.",
"EOFError": "Ton code à tenté de lire une ligne d'entrée, mais il n'y en avais pas ou plus ! A chaque fois que tu utilise input(), ton code lit une nouvelle ligne. Une erreure se produit quand plus aucune ligne n'a pas étée lue.",

"valueErrorInt": "Tu as essayé de convertire en nombre entier (int) une chaine de caractère, mais celle-ci ne représente pas un nombre entier! (ou alors, pas seulement un unique nombre entier) Si elle contient plusieurs éléments, tu peut les séparer en faisant [chaine].split() (en remplaçant [chaine] par la chaine de caractères)",
"valueErrorIntMappage": "Tu utilise la fonction int() pour convertire en nombre une suite d'entiers. Mais tu convertit plusieurs nombres à la fois ! pour cela, remplace int(--ton code--) par: map(int, (--ton code--).split())",
"valueErrorIntInsteadOfFloat": "Tu essaye de convertire un nombre a virgule en nombre entier. Pour utiliser un nombre a virgule, remplace int() par float()",

"undefinedVar": "La variable (ou la fonction) {{0}} n'existe pas, ou pas encore, à cet endroit. Vérifie que tu ne t'es pas trompé dans le nom ! Si c'est toi qui l'a créée, vérifie que tu le fait AVANT. Sinon, vérifie que le module et bien importé.",
"returnOutsideFct": "L'instruction 'return' doit se trouver dans une fonction. Elle termine la fonction et indique ce qu'elle retourne.",

"custom": "{{0}}"
}}
