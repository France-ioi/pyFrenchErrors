{"fr":{
"deuxPointsIf": "Une condition 'if' doit se terminer par les deux points ':' comme ceci :\n'if a < b:'.",
"deuxPointsElse": "Une condition 'else' doit se terminer par les deux points ':' comme ceci :\n'else:'.",
"deuxPointsElif": "Une condition 'elif' doit se terminer par les deux points ':' comme ceci :\n'else if b < c:'.",
"deuxPointsWhile": "Une boucle 'while' doit se terminer par les deux points ':' comme ceci :\n'while maVariable < 5:'.",
"deuxPointsFor": "Une boucle 'for' doit se terminer par les deux points ':' comme ceci :\n'for loop in range(5):'.",
"deuxPointsDef": "Une définition de fonction 'def' doit se terminer par les deux points ':' comme ceci :\n'def maFonction():'.",

"conditionOneEqual": "Pour écrire une égalité dans une condition, vous devez mettre un double signe égal,\net donc écrire: 'a == b'.",
"previousErrorBrackets|errorBrackets": "Vous devez avoir autant de parenthèses ouvrantes que fermetantes : vous pouvez écrire '(a*(b+c))' mais PAS '(a*(b+c)' NI 'a*(b+c))'",
"missingParentheses": "Vous devez mettre des parenthèses autour des paramètres d'une fonction pour l'appeler : vous ne devez pas écrire '{{0}} [paramètres]' MAIS '{{0}}([paramètres])', en remplaçant [paramètres] par les paramètres de la fonction.",

"pointVirguleFin": "En python, on n'a pas besoin de mettre un point-virgule à la fin d'une instruction.",
"typeVariableDeclaration": "En python, on n'a pas besoin de donner le type d'une variable lors de sa déclaration.",

"plusGrandEgalInversion": "Vous ne devez pas écrire '=>' mais : '>='.",
"plusPetitEgalInversion": "Vous ne devez pas écrire '=<' mais : '<='.",
"guillemetsError": "Vous n'avez pas bien fermé vos guillemets : vous devez avoir autant de guillements ouvrants\nque fermants autour d'une chaine de caractères. Par exemple, vous devez écrire 'Hello world !' ou encore \"Hello world !\".",

"nonAscii": "Vous avez utilisé un accent dans votre code, et vous n'avez pas le droit ! Enlevez l'accent,\nou alors rajoutez au début de votre code, avant TOUTES les autres lignes :\n\"# coding=utf-8\"",
"invalidSyntax": "Votre code n'est pas écrit correctement ! Vérifiez bien ce que vous avez écrit.",

"indentationError": "Vous avez une erreur dans l'indentation : vous devez mettre le même nombre d'espaces\ndevant les instructions d'un MÊME bloc.",
"indentationErrorEmptyBlock": "Vous avez un bloc d'instruction (if, elif, else, while, for, def...) qui est VIDE,\nce qui est interdit.",
"indentationErrorLevel": "TOUTES les instructions d'un même bloc d'instructions (if, elif, else, while, for, def...)\ndoivent avoir le même nombre d'espaces devant elles (sauf si elles sont dans des sous-blocs).",

"indexError": "Vous accédez à une case de la liste qui n'existe pas. Si vous utilisez une variable,\nvérifiez qu'elle ne peut pas être trop grande. Souvenez-vous que les cases d'une liste sont numérotées de 0 à TAILLE-1.",
"KeyError": "Vous accédez à une CLÉ (une case) de votre dictionnaire qui n'existe pas.\nVérifiez que la clé a bien été définie dans le dictionnaire !",
"ZeroDivisionError": "Cette instruction effectue une division par zero, ce qui est IMPOSSIBLE.\nSi vous utilisez une variable, vérifiez que le diviseur ne vaut jamais 0.",
"mathDomainError": "Vous utilisez un fonction mathématique en lui donnant un nombre qui est interdit !",
"mathDomainError_log" : "La fonction log (logarithme) prend en paramètre un nombre qui doit être STRICTEMENT SUPÉRIEUR à 0.",
"mathDomainError_sqrt":"La fonction sqrt (racine carrée) prend en paramètre un nombre qui doit être SUPÉRIEUR OU ÉGAL à 0.",
"ImportError": "Un fichier ou un module inexistant est importé. Vérifiez bien son nom.",
"EOFError": "Votre code à tenté de lire une ligne d'entrée, mais il n'y en avait pas ou plus !\nÀ chaque fois que vous utilisez input(), le code lit une nouvelle ligne.\nUne erreur se produit quand plus aucune ligne ne peut être lue.",

"valueErrorInt": "Vous avez essayé de convertir en nombre entier (int) une chaîne de caractères,\nmais celle-ci ne représente pas un nombre entier (ou alors, pas seulement un unique nombre entier) !\nSi elle contient plusieurs éléments, vous pouvez les séparer en faisant :\n'[chaîne].split()' (en remplaçant [chaîne] par la chaine de caractères).",
"valueErrorIntMappage": "Vous utilisez la fonction int() pour convertir en nombre une suite d'entiers.\nMais vous convertissez plusieurs nombres à la fois !\nPour cela, remplacez 'int(--ton code--)' par 'map(int, (--ton code--).split())'.",
"valueErrorIntInsteadOfFloat": "Vous essayez de convertir un nombre à virgule en nombre entier.\nPour utiliser un nombre à virgule, remplace int() par float().",

"undefinedVar": "La variable (ou la fonction) {{0}} n'existe pas, ou pas encore à cet endroit.\nVérifiez que vous ne vous êtes pas trompé dans le nom !\nSi c'est vous qui l'avez créée, vérifie que vous l'avez fait AVANT.\nSinon, vérifiez que le module est bien importé.",
"returnOutsideFct": "L'instruction 'return' doit se trouver dans une fonction.\nElle termine la fonction et indique ce qu'elle retourne.",

"custom": "{{0}}"
}}
